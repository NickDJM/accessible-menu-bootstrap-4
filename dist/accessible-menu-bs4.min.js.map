{"version":3,"file":"accessible-menu-bs4.min.js","sources":["../node_modules/accessible-menu/src/validate.js","../node_modules/accessible-menu/src/_baseMenuToggle.js","../node_modules/accessible-menu/src/_baseMenuItem.js","../node_modules/accessible-menu/src/eventHandlers.js","../node_modules/accessible-menu/src/_baseMenu.js","../node_modules/accessible-menu/src/disclosureMenuItem.js","../node_modules/accessible-menu/src/disclosureMenuToggle.js","../node_modules/accessible-menu/src/disclosureMenu.js","../src/bootstrap4DisclosureMenuItem.js","../src/bootstrap4DisclosureMenuToggle.js","../src/bootstrap4DisclosureMenu.js","../node_modules/accessible-menu/src/menubarItem.js","../node_modules/accessible-menu/src/menubarToggle.js","../node_modules/accessible-menu/src/menubar.js","../src/bootstrap4MenubarItem.js","../src/bootstrap4MenubarToggle.js","../src/bootstrap4Menubar.js","../node_modules/accessible-menu/src/treeviewItem.js","../node_modules/accessible-menu/src/treeviewToggle.js","../node_modules/accessible-menu/src/treeview.js","../src/bootstrap4TreeviewItem.js","../src/bootstrap4TreeviewToggle.js","../rollup.js","../src/bootstrap4Treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string,string[]>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string}               tagName  - The name of the tag.\n * @param   {object.<HTMLElement>} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    /**\n     * Expand event.\n     *\n     * @event accessibleMenuExpand\n     * @type {CustomEvent}\n     * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n     */\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    /**\n     * Collapse event.\n     *\n     * @event accessibleMenuCollapse\n     * @type {CustomEvent}\n     * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n     */\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @type {object.<HTMLElement>}\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @type {object.<BaseMenu>}\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @type {boolean}\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   * @fires accessibleMenuExpand\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   * @fires accessibleMenuCollapse\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @type {object.<string>}\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @type {boolean}\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @type {string}\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu#hoverType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this.submenuOpenClass !== value) {\n      this.submenuOpenClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this.submenuCloseClass !== value) {\n      this.submenuCloseClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this.focussedChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this.focussedChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this.focussedChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this.state !== value) {\n      this.state = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this.event !== value) {\n      this.event = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this.hover !== value) {\n      this.hover = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this.delay !== value) {\n      this.delay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      submenuOpenClass !== \"\" &&\n      !isValidClassList({ openClass: submenuOpenClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      submenuCloseClass !== \"\" &&\n      !isValidClassList({ closeClass: submenuCloseClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * This will set the actual `domElement` property, so all existing items in a\n   * given `domElement` property will be removed when this is run.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * This is an additive function, so existing items in a given `domElement`\n   * property will not be touched.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#setDOMElementType|setDOMElementType},\n   * {@link BaseMenu#clearDOMElementType|clearDOMElementType},\n   * and {@link BaseMenu#addDOMElementType|addDOMElementType}.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds a `touchend`/`mouseup` listener to the document so if the user clicks\n   *   outside of the menu when it is open, the menu will close.\n   * - Adds a `touchstart`/`mousedown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `touchend`/`mouseup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `touchend`/`mouseup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.elements.rootMenu.blurChildren();\n        this.focusChild(index);\n      });\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu#hoverType|hover type}.\n   *\n   * **Hover Type \"on\"**\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `mouseenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `mouseleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu#hoverDelay|hover delay}.\n   *\n   * **Hover Type \"dynamic\"**\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `mouseleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * **Hover Type \"off\"**\n   * All `mouseenter` and `mouseleave` events are ignored.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#handleKeyup|handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuItem\n */\nclass DisclosureMenuItem extends BaseMenuItem {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                    options                         - The options for generating the menu item.\n   * @param {HTMLElement}               options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}               options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {DisclosureMenu}            options.parentMenu              - The parent menu.\n   * @param {boolean}                   [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {DisclosureMenu|null}       [options.childMenu = null]      - The child menu.\n   * @param {DisclosureMenuToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                   [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuToggle\n */\nclass DisclosureMenuToggle extends BaseMenuToggle {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}              options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}         options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}         options.parentElement       - The element containing the controlled menu.\n   * @param {DisclosureMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {DisclosureMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}             [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default DisclosureMenuToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport DisclosureMenuItem from \"./disclosureMenuItem.js\";\nimport DisclosureMenuToggle from \"./disclosureMenuToggle.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\nimport { isValidType, isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible disclosure menu in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html|Example Disclosure for Navigation Menus}\n *\n * @extends BaseMenu\n */\nclass DisclosureMenu extends BaseMenu {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                 options                              - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                  - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]      - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]       - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]        - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a]  - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]       - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]   - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]    - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]           - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]          - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]         - A flag to mark the root menu.\n   * @param {(DisclosureMenu|null)}  [options.parentMenu = null]          - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]            - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]           - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.optionalKeySupport = false] - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}                [options.initialize = true]          - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = DisclosureMenu;\n    this.MenuItemType = DisclosureMenuItem;\n    this.MenuToggleType = DisclosureMenuToggle;\n\n    this.currentChild = -1;\n    this.optionalKeySupport = optionalKeySupport;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, \"Home\", and \"End\") to the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's optionalKeySupport.\n   *\n   * @type {boolean}\n   */\n  get optionalKeySupport() {\n    return this.isTopLevel\n      ? this.optionalSupport\n      : this.elements.rootMenu.optionalKeySupport;\n  }\n\n  set optionalKeySupport(value) {\n    isValidType(\"boolean\", { optionalKeySupport: value });\n\n    this.optionalSupport = value;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link DisclosureMenu#handleFocus|focus},\n   * {@link DisclosureMenu#handleClick|click},\n   * {@link DisclosureMenu#handleHover|hover},\n   * {@link DisclosureMenu#handleKeydown|keydown}, and\n   * {@link DisclosureMenu#handleKeyup|keyup} events for the menu.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#handleClick|BaseMenu's handleClick method}, and\n   * - adds a `touchend`/`mouseup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   *\n   */\n  handleClick() {\n    super.handleClick();\n\n    // Use touch over mouse events when supported.\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link DisclosureMenu#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"Space\", \"Enter\", and \"Escape\".\n   *   - _If_ {@link DisclosureMenu#optionalKeySupport|optional keyboard support}\n   *     is enabled, blocks propagation on the following keys:\n   *     \"ArrowUp\", \"ArrowRight\", \"ArrowDown\", \"ArrowLeft\", \"Home\", and \"End\".\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (this.focusState === \"self\") {\n        const submenuKeys = [\"Space\", \"Enter\"];\n        const controllerKeys = [\"Escape\"];\n        const parentKeys = [\"Escape\"];\n\n        if (this.optionalKeySupport) {\n          const keys = [\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"Home\",\n            \"End\",\n          ];\n          if (keys.includes(key)) {\n            preventEvent(event);\n          }\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        } else if (this.elements.parentMenu && parentKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html#kbd_label|WAI ARIA Pracitices Example Disclosure for Navigation Menus}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Tab_ or _Shift + Tab_ | Move keyboard focus among top-level buttons, and if a dropdown is open, into and through links in the dropdown. |\n   * | _Space_ or _Enter_ | <ul><li>If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.</li><li>If focus is on a link:<ul><li>If any link has aria-current set, removes it.</li><li>Sets aria-current=\"page\" on the focused link.</li><li>Activates the focused link.</li></ul></li></ul> |\n   * | _Escape_ | If a dropdown is open, closes it and sets focus on the button that controls that dropdown. |\n   * | _Down Arrow_ or _Right Arrow_ (Optional}) | <ul><li>If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.</li><li>if focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.</li><li>If focus is on a link, and it is not the last link, moves focus to the next link.</li></ul> |\n   * | _Up Arrow_ or _Left Arrow_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the previous button.</li><li>If focus is on a link, and it is not the first link, moves focus to the previous link.</li></ul> |\n   * | _Home_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the first button.</li><li>If focus is on a link, and it is not the first link, moves focus to the first link.</li></ul> |\n   * | _End_ (Optional}) | <ul><li>If focus is on a button, and it is not the last button, moves focus to the last button.</li><li>If focus is on a link, and it is not the last link, moves focus to the last link.</li></ul> |\n   *\n   * The optional keybindings are controlled by the menu's {@link DisclosureMenu#optionalKeySupport|optionalKeySupport} value.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.toggle.preview();\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape\n          // - If a dropdown is open, closes it.\n          // - If was within the closed dropdown, sets focus on the button that controls that dropdown.\n          const hasOpenChild = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n\n          if (hasOpenChild) {\n            preventEvent(event);\n            this.closeChildren();\n          } else if (this.elements.parentMenu) {\n            preventEvent(event);\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.closeChildren();\n            this.elements.parentMenu.focusCurrentChild();\n          } else if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (this.optionalKeySupport) {\n          if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n            // Hitting the Down or Right Arrow:\n            // - If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.\n            // - If focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.\n            // - If focus is on a link, and it is not the last link, moves focus to the next link.\n            preventEvent(event);\n\n            if (\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen\n            ) {\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.focusNextChild();\n            }\n          } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n            // Hitting the Up or Left Arrow:\n            // - If focus is on a button, and it is not the first button, moves focus to the previous button.\n            // - If focus is on a link, and it is not the first link, moves focus to the previous link.\n            preventEvent(event);\n            this.focusPreviousChild();\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - If focus is on a button, and it is not the first button, moves focus to the first button.\n            // - If focus is on a link, and it is not the first link, moves focus to the first link.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - If focus is on a button, and it is not the last button, moves focus to the last button.\n            // - If focus is on a link, and it is not the last link, moves focus to the last link.\n            preventEvent(event);\n            this.focusLastChild();\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default DisclosureMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport DisclosureMenuItem from \"accessible-menu/src/disclosureMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a Bootstrap4DisclosureMenu.\n */\nclass Bootstrap4DisclosureMenuItem extends DisclosureMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                              param0                         - The menu item object.\n   * @param {HTMLElement}                         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}                         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Bootstrap4DisclosureMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}                             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Bootstrap4DisclosureMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {Bootstrap4DisclosureMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                             [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n      initialize: false,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default Bootstrap4DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport DisclosureMenuToggle from \"accessible-menu/src/disclosureMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a Bootstrap4DisclosureMenu.\n */\nclass Bootstrap4DisclosureMenuToggle extends DisclosureMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                        param0                     - The menu toggle object.\n   * @param {HTMLElement}                   param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}                   param0.parentElement       - The element containing the controlled menu.\n   * @param {Bootstrap4DisclosureMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {Bootstrap4DisclosureMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                       [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n      initialize: false,\n    });\n\n    // Set the container for the toggle.\n    // This differs based on if the menu is top-level or not.\n    this.domElements.container = controlledMenu.isTopLevel\n      ? controlledMenu.dom.container\n      : controlledMenu.dom.menu;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the toggle by removing the default bootstrap toggle information\n   * and running the parent's initialization.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.container.classList.add(\"collapse\");\n\n    if (this.dom.toggle.hasAttribute(\"data-toggle\")) {\n      this.dom.toggle.removeAttribute(\"data-toggle\");\n    }\n\n    if (this.dom.toggle.hasAttribute(\"data-target\")) {\n      this.dom.toggle.removeAttribute(\"data-target\");\n    }\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.dom.container.classList.add(openClass);\n      } else {\n        this.dom.container.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.dom.container.classList.remove(closeClass);\n      } else {\n        this.dom.container.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.dom.container.classList.add(closeClass);\n      } else {\n        this.dom.container.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.dom.container.classList.remove(openClass);\n      } else {\n        this.dom.container.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n}\n\nexport default Bootstrap4DisclosureMenuToggle;\n","import DisclosureMenu from \"accessible-menu/src/disclosureMenu.js\";\nimport Bootstrap4DisclosureMenuItem from \"./bootstrap4DisclosureMenuItem.js\";\nimport Bootstrap4DisclosureMenuToggle from \"./bootstrap4DisclosureMenuToggle.js\";\n\n/**\n * An accessible disclosure menu in the DOM using Bootstrap 4.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html\n */\nclass Bootstrap4DisclosureMenu extends DisclosureMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                        param0                               - The menu object.\n   * @param {HTMLElement}                   param0.menuElement                   - The menu element in the DOM.\n   * @param {string}                        [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}                        [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}                        [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}                        [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                        [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}              [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}              [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}                        [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}                        [param0.closeClass = \"\"]             - The class to apply when a menu is \"closed\".\n   * @param {boolean}                       [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Bootstrap4DisclosureMenu|null} [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}                        [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}                        [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                       [param0.optionalKeySupport = false]  - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}                       [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n      optionalKeySupport,\n      initialize: false,\n    });\n\n    // Set default class types.\n    this.MenuType = Bootstrap4DisclosureMenu;\n    this.MenuItemType = Bootstrap4DisclosureMenuItem;\n    this.MenuToggleType = Bootstrap4DisclosureMenuToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default Bootstrap4DisclosureMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Menubar}.\n *\n * @extends BaseMenuItem\n */\nclass MenubarItem extends BaseMenuItem {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}             options                         - The options for generating the menu item.\n   * @param {HTMLElement}        options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}        options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Menubar}            options.parentMenu              - The parent menu.\n   * @param {boolean}            [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Menubar|null}       [options.childMenu = null]      - The child menu.\n   * @param {MenubarToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}            [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"menuitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0 if the parent menu\n   * is the root menu.\n   */\n  focus() {\n    super.focus();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1 if the parent menu\n   * is the root menu.\n   */\n  blur() {\n    super.blur();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = -1;\n    }\n  }\n}\n\nexport default MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Menubar}.\n *\n * @extends BaseMenuToggle\n */\nclass MenubarToggle extends BaseMenuToggle {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}       options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}  options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}  options.parentElement       - The element containing the controlled menu.\n   * @param {Menubar}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Menubar|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}      [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link MenubarToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default MenubarToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport MenubarItem from \"./menubarItem.js\";\nimport MenubarToggle from \"./menubarToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\nimport { isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html|Navigation Menubar Example}\n *\n * @extends BaseMenu\n */\nclass Menubar extends BaseMenu {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Menubar|null)}         [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    this.MenuType = Menubar;\n    this.MenuItemType = MenubarItem;\n    this.MenuToggleType = MenubarToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Menubar#handleFocus|focus},\n   * {@link Menubar#handleClick|click},\n   * {@link Menubar#handleHover|hover},\n   * {@link Menubar#handleKeydown|keydown}, and\n   * {@link Menubar#handleKeyup|keyup} events for the menu.\n   *\n   * This will also set the menu's `role` to \"menubar\" in the DOM.\n   *\n   * If the menu is a root menu the first menu item's `tabIndex` will be set to\n   * 0 in the DOM.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n\n      if (this.isTopLevel) {\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#handleClick|BaseMenu's handleClick method}, and\n   * - adds a `touchend`/`mouseup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   */\n  handleClick() {\n    super.handleClick();\n\n    // Use touch over mouse events when supported.\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Menubar#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     and \"A\" through \"Z\".\n   *   - Completely closes the menu and moves focus out if the \"Tab\" key is pressed.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n          this.elements.rootMenu.closeChildren();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (key === \"Character\") {\n        preventEvent(event);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\n          const controllerKeys = [\"Escape\"];\n\n          if (keys.includes(key)) {\n            preventEvent(event);\n          } else if (\n            this.currentMenuItem.isSubmenuItem &&\n            submenuKeys.includes(key)\n          ) {\n            preventEvent(event);\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\n            preventEvent(event);\n          }\n        }\n      } else {\n        const keys = [\n          \"Escape\",\n          \"ArrowRight\",\n          \"ArrowLeft\",\n          \"ArrowDown\",\n          \"ArrowUp\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Space\", \"Enter\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/menubar/menubar-1/menubar-1.html#kbd_label|Navigation Menubar Example}):\n   *\n   * **Menubar**\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Space_ or _Enter_ | Opens submenu and moves focus to first item in the submenu. |\n   * | _Right Arrow_ | <ul><li>Moves focus to the next item in the menubar.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\n   * | _Left Arrow_ | <ul><li>Moves focus to the previous item in the menubar.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\n   * | _Down Arrow_ | Opens submenu and moves focus to first item in the submenu. |\n   * | _Up Arrow_ | Opens submenu and moves focus to last item in the submenu. |\n   * | _Home_ | Moves focus to first item in the menubar. |\n   * | _End_ | Moves focus to last item in the menubar. |\n   * | _Character_ | <ul><li>Moves focus to next item in the menubar having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\n   *\n   * **Submenu**\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Space_ or _Enter_ | <ul><li>Activates menu item, causing the link to be activated.</li><li>NOTE: the links go to dummy pages; use the browser go-back function to return to this menubar example page.</li></ul> |\n   * | _Escape_ | <ul><li>Closes submenu.</li><li>Moves focus to parent menubar item.</li></ul> |\n   * | _Right Arrow_ | <ul><li>If focus is on an item with a submenu, opens the submenu and places focus on the first item.</li><li>If focus is on an item that does not have a submenu:<ul><li>Closes submenu.</li><li>Moves focus to next item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\n   * | _Left Arrow_ | <ul><li>Closes submenu and moves focus to parent menu item.</li><li>If parent menu item is in the menubar, also:<ul><li>moves focus to previous item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\n   * | _Down Arrow_ | <ul><li>Moves focus to the next item in the submenu.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\n   * | _Up Arrow_ | <ul><li>Moves focus to previous item in the submenu.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\n   * | Home | Moves focus to the first item in the submenu. |\n   * | End | Moves focus to the last item in the submenu. |\n   * | _Character_ | <ul><li>Moves focus to the next item having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\n        // - If none of the items have a name starting with the typed character, focus does not move.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextChildWithCharacter(event.key);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          if (key === \"Space\" || key === \"Enter\") {\n            // Hitting Space or Enter:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            } else {\n              this.currentMenuItem.dom.link.click();\n            }\n          } else if (key === \"ArrowRight\") {\n            // Hitting the Right Arrow:\n            // - Moves focus to the next item in the menubar.\n            // - If focus is on the last item, moves focus to the first item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusNextChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowLeft\") {\n            // Hitting the Left Arrow:\n            // - Moves focus to the previous item in the menubar.\n            // - If focus is on the first item, moves focus to the last item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusPreviousChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowDown\") {\n            // Hitting the Down Arrow:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            }\n          } else if (key === \"ArrowUp\") {\n            // Hitting the Up Arrow:\n            // - Opens submenu and moves focus to last item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusLastChild();\n              });\n            }\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - Moves focus to first item in the menubar.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - Moves focus to last item in the menubar.\n            preventEvent(event);\n            this.focusLastChild();\n          } else if (key === \"Escape\") {\n            // Hitting Escape:\n            // - Closes menu.\n            const hasOpenChild = this.elements.submenuToggles.some(\n              (toggle) => toggle.isOpen\n            );\n\n            if (hasOpenChild) {\n              preventEvent(event);\n              this.closeChildren();\n            } else if (\n              this.isTopLevel &&\n              this.elements.controller &&\n              this.elements.controller.isOpen\n            ) {\n              preventEvent(event);\n              this.elements.controller.close();\n              this.focusController();\n            }\n          }\n        }\n      } else {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - Activates menu item, causing the link to be activated.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape:\n          // - Closes submenu.\n          // - Moves focus to parent menubar item.\n          preventEvent(event);\n          this.elements.rootMenu.closeChildren();\n          this.elements.rootMenu.focusCurrentChild();\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\n          // - If focus is on an item that does not have a submenu:\n          //   - Closes submenu.\n          //   - Moves focus to next item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            preventEvent(event);\n            this.elements.rootMenu.closeChildren();\n            this.elements.rootMenu.focusNextChild();\n\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - Closes submenu and moves focus to parent menu item.\n          // - If parent menu item is in the menubar, also:\n          //   - moves focus to previous item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\n            this.elements.parentMenu.focusCurrentChild();\n\n            if (this.elements.parentMenu === this.elements.rootMenu) {\n              this.elements.rootMenu.closeChildren();\n              this.elements.rootMenu.focusPreviousChild();\n\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n              }\n            }\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next item in the menubar.\n          // - If focus is on the last item, moves focus to the first item.\n          preventEvent(event);\n          this.focusNextChild();\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous item in the menubar.\n          // - If focus is on the first item, moves focus to the last item.\n          preventEvent(event);\n          this.focusPreviousChild();\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first item in the menubar.\n          preventEvent(event);\n          this.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to last item in the menubar.\n          preventEvent(event);\n          this.focusLastChild();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's next child.\n   *\n   * If the currently focussed child in the menu is the last child then this will\n   * focus the first child in the menu.\n   */\n  focusNextChild() {\n    // If the current child is the last child of the menu, focus the menu's first child.\n    if (this.currentChild === this.elements.menuItems.length - 1) {\n      this.focusFirstChild();\n    } else {\n      this.focusChild(this.currentChild + 1);\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   *\n   * If the currently focussed child in the menu is the first child then this will\n   * focus the last child in the menu.\n   */\n  focusPreviousChild() {\n    // If the current child is the first child of the menu, focus the menu's last child.\n    if (this.currentChild === 0) {\n      this.focusLastChild();\n    } else {\n      this.focusChild(this.currentChild - 1);\n    }\n  }\n\n  /**\n   * Focus the menu's next child starting with a specific letter.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextChildWithCharacter(char) {\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    let index = this.currentChild + 1;\n    let found = false;\n\n    while (!found && index < this.elements.menuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (this.elements.menuItems[index].dom.item.innerText) {\n        text = this.elements.menuItems[index].dom.item.innerText;\n      } else {\n        text = this.elements.menuItems[index].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        this.focusChild(index);\n      }\n\n      index++;\n    }\n  }\n}\n\nexport default Menubar;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport MenubarItem from \"accessible-menu/src/menubarItem.js\";\n\n/**\n * A basic navigation link contained inside of a Bootstrap4Menubar.\n */\nclass Bootstrap4MenubarItem extends MenubarItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                       param0                         - The menu item object.\n   * @param {HTMLElement}                  param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}                  param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Bootstrap4Menubar}            param0.parentMenu              - The parent menu.\n   * @param {boolean}                      [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Bootstrap4Menubar|null}       [param0.childMenu = null]      - The child menu.\n   * @param {Bootstrap4MenubarToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                      [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n      initialize: false,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default Bootstrap4MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport MenubarToggle from \"accessible-menu/src/menubarToggle.js\";\n\n/*\n * A link or button that controls the visibility of a Bootstrap4Menubar.\n */\nclass Bootstrap4MenubarToggle extends MenubarToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                 param0                     - The menu toggle object.\n   * @param {HTMLElement}            param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}            param0.parentElement       - The element containing the controlled menu.\n   * @param {Bootstrap4Menubar}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {Bootstrap4Menubar|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n      initialize: false,\n    });\n\n    // Set the container for the toggle.\n    // This differs based on if the menu is top-level or not.\n    this.domElements.container = controlledMenu.isTopLevel\n      ? controlledMenu.dom.container\n      : controlledMenu.dom.menu;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the toggle by removing the default bootstrap toggle information\n   * and running the parent's initialization.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.container.classList.add(\"collapse\");\n\n    if (this.dom.toggle.hasAttribute(\"data-toggle\")) {\n      this.dom.toggle.removeAttribute(\"data-toggle\");\n    }\n\n    if (this.dom.toggle.hasAttribute(\"data-target\")) {\n      this.dom.toggle.removeAttribute(\"data-target\");\n    }\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.dom.container.classList.add(openClass);\n      } else {\n        this.dom.container.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.dom.container.classList.remove(closeClass);\n      } else {\n        this.dom.container.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.dom.container.classList.add(closeClass);\n      } else {\n        this.dom.container.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.dom.container.classList.remove(openClass);\n      } else {\n        this.dom.container.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n}\n\nexport default Bootstrap4MenubarToggle;\n","import Menubar from \"accessible-menu/src/menubar.js\";\nimport Bootstrap4MenubarItem from \"./bootstrap4MenubarItem.js\";\nimport Bootstrap4MenubarToggle from \"./bootstrap4MenubarToggle.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html\n */\nclass Bootstrap4Menubar extends Menubar {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                 param0                               - The menu object.\n   * @param {HTMLElement}            param0.menuElement                   - The menu element in the DOM.\n   * @param {string}                 [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}                 [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}                 [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}       [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}       [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}                 [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}                 [param0.closeClass = \"\"]             - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Bootstrap4Menubar|null} [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}                 [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}                 [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n      initialize: false,\n    });\n\n    this.MenuType = Bootstrap4Menubar;\n    this.MenuItemType = Bootstrap4MenubarItem;\n    this.MenuToggleType = Bootstrap4MenubarToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default Bootstrap4Menubar;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                  options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}             options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}             options.parentElement       - The element containing the controlled menu.\n   * @param {TreeviewNavigation}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {TreeviewNavigation|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                 [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n */\nclass Treeview extends BaseMenu {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = Treeview;\n    this.MenuItemType = TreeviewItem;\n    this.MenuToggleType = TreeviewToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#handleFocus|focus},\n   * {@link Treeview#handleClick|click},\n   * {@link Treeview#handleHover|hover},\n   * {@link Treeview#handleKeydown|keydown}, and\n   * {@link Treeview#handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param {Treeview} menu - The menu.\n     *\n     * @returns {TreeviewItem[]} - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport TreeviewItem from \"accessible-menu/src/treeviewItem.js\";\n\n/**\n * A basic navigation link contained inside of a Bootstrap4Treeview.\n */\nclass Bootstrap4TreeviewItem extends TreeviewItem {\n  /**\n   * @inheritdoc\n   * @param {object}                        options                         - The options for generating the menu item.\n   * @param {HTMLElement}                   options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}                   options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}                      options.parentMenu              - The parent menu.\n   * @param {boolean}                       [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Bootstrap4Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {Bootstrap4TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                       [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n      initialize: false,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default Bootstrap4TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport TreeviewToggle from \"accessible-menu/src/treeviewToggle.js\";\n\n/**\n * A link or button that controls the visibility of a Bootstrap4Treeview.\n */\nclass Bootstrap4TreeviewToggle extends TreeviewToggle {\n  /**\n   * @inheritdoc\n   * @param {object}                            options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}                       options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}                       options.parentElement       - The element containing the controlled menu.\n   * @param {Bootstrap4TreeviewNavigation}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Bootstrap4TreeviewNavigation|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                           [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n      initialize: false,\n    });\n\n    // Set the container for the toggle.\n    // This differs based on if the menu is top-level or not.\n    this.domElements.container = controlledMenu.isTopLevel\n      ? controlledMenu.dom.container\n      : controlledMenu.dom.menu;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the toggle by removing the default bootstrap toggle information\n   * and running the parent's initialization.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.container.classList.add(\"collapse\");\n\n    if (this.dom.toggle.hasAttribute(\"data-toggle\")) {\n      this.dom.toggle.removeAttribute(\"data-toggle\");\n    }\n\n    if (this.dom.toggle.hasAttribute(\"data-target\")) {\n      this.dom.toggle.removeAttribute(\"data-target\");\n    }\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.dom.container.classList.add(openClass);\n      } else {\n        this.dom.container.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.dom.container.classList.remove(closeClass);\n      } else {\n        this.dom.container.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.dom.container.classList.add(closeClass);\n      } else {\n        this.dom.container.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.dom.container.classList.remove(openClass);\n      } else {\n        this.dom.container.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n}\n\nexport default Bootstrap4TreeviewToggle;\n","import Bootstrap4DisclosureMenu from \"./src/bootstrap4DisclosureMenu.js\";\nimport Bootstrap4Menubar from \"./src/bootstrap4Menubar.js\";\nimport Bootstrap4Treeview from \"./src/bootstrap4Treeview.js\";\n\nexport default {\n  Bootstrap4DisclosureMenu,\n  Bootstrap4Menubar,\n  Bootstrap4Treeview,\n};\n","import Treeview from \"accessible-menu/src/treeview.js\";\nimport Bootstrap4TreeviewItem from \"./bootstrap4TreeviewItem.js\";\nimport Bootstrap4TreeviewToggle from \"./bootstrap4TreeviewToggle.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html\n */\nclass Bootstrap4Treeview extends Treeview {\n  /**\n   * @inheritdoc\n   * @param {object}                  options                             - The options for generating the menu.\n   * @param {HTMLElement}             options.menuElement                 - The menu element in the DOM.\n   * @param {string}                  [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                  [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                  [options.submenuItemSelector = \"\"]  - The CSS selector string for menu items containing submenus.\n   * @param {string}                  [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                  [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}        [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}        [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {string|string[]|null}    [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {string|string[]|null}    [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                 [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {Bootstrap4Treeview|null} [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                  [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                  [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                 [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n      initialize: true,\n    });\n\n    // Set default class types.\n    this.MenuType = Bootstrap4Treeview;\n    this.MenuItemType = Bootstrap4TreeviewItem;\n    this.MenuToggleType = Bootstrap4TreeviewToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default Bootstrap4Treeview;\n"],"names":["isValidInstance","contructor","elements","TypeError","key","elementType","name","error","console","isValidType","type","values","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","constructor","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","initialize","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","expand","emit","closeClass","openClass","classList","add","remove","dispatchEvent","open","focusState","preview","close","currentChild","blur","closeSiblings","submenuToggles","closeChildren","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","focus","shouldFocus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","findRootMenu","setDOMElements","createChildElements","currentEvent","setParentChild","index","found","menuItem","focusChild","validStates","isValidState","validEvents","isValidEvent","submenuToggle","setDOMElementType","base","filter","selectors","baseElement","baseFilter","selector","from","querySelectorAll","addDOMElementType","clearDOMElementType","toggler","submenu","push","handleFocus","addEventListener","handleClick","startEventType","endEventType","toggleToggle","blurChildren","handleHover","some","focusCurrentChild","setTimeout","handleKeydown","handleKeyup","focusFirstChild","currentMenuItem","blurCurrentChild","focusLastChild","focusNextChild","focusPreviousChild","focusController","focusContainer","DisclosureMenuItem","DisclosureMenuToggle","DisclosureMenu","optionalKeySupport","optionalSupport","contains","target","submenuKeys","controllerKeys","parentKeys","click","Bootstrap4DisclosureMenuItem","Bootstrap4DisclosureMenuToggle","hasAttribute","removeAttribute","Bootstrap4DisclosureMenu","MenubarItem","tabIndex","MenubarToggle","Menubar","altKey","crtlKey","metaKey","requestAnimationFrame","previousChildOpen","focusNextChildWithCharacter","char","text","textContent","charAt","Bootstrap4MenubarItem","Bootstrap4MenubarToggle","Bootstrap4Menubar","TreeviewItem","TreeviewToggle","Treeview","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","Bootstrap4TreeviewItem","Bootstrap4TreeviewToggle","Bootstrap4Treeview"],"mappings":"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"}